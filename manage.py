from PyQt5 import QtCore, QtGui, QtWidgets
import wikipedia, sys, nltk, heapq, re, gtts, os
from playsound import playsound

# GUI generated by Qt Designer
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.searchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.searchBar.setGeometry(QtCore.QRect(10, 10, 211, 22))
        self.searchBar.setText("")
        self.searchBar.setObjectName("searchBar")

        self.searchButton = QtWidgets.QPushButton(self.centralwidget)
        self.searchButton.setGeometry(QtCore.QRect(230, 10, 93, 28))
        self.searchButton.setObjectName("searchButton")

        self.scrollResults = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollResults.setGeometry(QtCore.QRect(10, 70, 211, 201))
        self.scrollResults.setWidgetResizable(True)
        self.scrollResults.setObjectName("scrollResults")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 209, 199))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        
        self.relatedText = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.relatedText.setGeometry(QtCore.QRect(0, 0, 211, 201))
        self.relatedText.setObjectName("relatedText")
        self.scrollResults.setWidget(self.scrollAreaWidgetContents)

        self.relatedLabel = QtWidgets.QLabel(self.centralwidget)
        self.relatedLabel.setGeometry(QtCore.QRect(10, 50, 111, 16))
        self.relatedLabel.setObjectName("relatedLabel")

        self.scrollSummary = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollSummary.setGeometry(QtCore.QRect(360, 70, 401, 461))
        self.scrollSummary.setWidgetResizable(True)
        self.scrollSummary.setObjectName("scrollSummary")

        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 399, 459))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        
        self.summaryText = QtWidgets.QTextEdit(self.scrollAreaWidgetContents_2)
        self.summaryText.setGeometry(QtCore.QRect(0, 0, 401, 461))
        self.summaryText.setObjectName("summaryText")
        self.scrollSummary.setWidget(self.scrollAreaWidgetContents_2)

        self.summaryLabel = QtWidgets.QLabel(self.centralwidget)
        self.summaryLabel.setGeometry(QtCore.QRect(360, 50, 61, 16))
        self.summaryLabel.setObjectName("summaryLabel")

        self.sentenceNumBox = QtWidgets.QSpinBox(self.centralwidget)
        self.sentenceNumBox.setGeometry(QtCore.QRect(710, 40, 42, 22))
        self.sentenceNumBox.setObjectName("sentenceNumBox")

        self.sentenceLabel = QtWidgets.QLabel(self.centralwidget)
        self.sentenceLabel.setGeometry(QtCore.QRect(500, 40, 201, 16))
        self.sentenceLabel.setObjectName("sentenceLabel")
        
        self.speakButton = QtWidgets.QPushButton(self.centralwidget)
        self.speakButton.setGeometry(QtCore.QRect(660, 540, 93, 28))
        self.speakButton.setObjectName("speakButton")
        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Method to execute the search from the GUI
        self.searchButton.clicked.connect(lambda: self.search(self.searchBar.text(), self.sentenceNumBox.value()))
        # Method to execute speaking the summary
        self.speakButton.clicked.connect(lambda: self.speak(self.summaryText.toPlainText()))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.searchBar.setPlaceholderText(_translate("MainWindow", "Type search terms here..."))
        self.searchButton.setText(_translate("MainWindow", "Search"))
        self.relatedLabel.setText(_translate("MainWindow", "Related Articles"))
        self.summaryLabel.setText(_translate("MainWindow", "Summary"))
        self.sentenceLabel.setText(_translate("MainWindow", "Summary Legnth (# of Sentences)"))
        self.speakButton.setText(_translate("MainWindow", "Speak"))
    
    # Search method for when search button gets pressed
    def search(self, text, num):
        # Clear the summary text box
        self.summaryText.clear()
        # Clear the related text box
        self.relatedText.clear()
        # Create wiki object for user article search
        wiki = wikipedia.WikipediaPage(title=text, redirect=True)
        # Get the wiki's text content
        article = wiki.content
        # Get the summary and set it to the summaryText box
        self.summaryText.setText(summary(article, num))
        # This is a rough way to get a list print out of related articles using wikipedia.search()
        tmp = wikipedia.search(wiki.title, results=20, suggestion=True)
        related = ''.join([str(item) for item in tmp])
        self.relatedText.setText(related)
        self.searchBar.clear()

    # Speak method for speaking the summary using gTTS
    def speak(self, text):
        tts = gtts.gTTS(text=text, lang='en', slow=False)
        # Save an .mp3 of the summary as the current time
        tts.save("summary.mp3")
        # Play previously saved .mp3
        #os.system("start summary.mp3")
        playsound('summary.mp3')

# Text summarization algorithm method, takes number input for summary length
def summary(str, num):
    #Get article content from method
    article_text = str
    # Removing Square Brackets and Extra Spaces
    article_text = re.sub(r'\[[0-9]*\]', ' ', article_text)
    article_text = re.sub(r'\s+', ' ', article_text)
    # Removing special characters and digits
    formatted_article_text = re.sub('[^a-zA-Z]', ' ', article_text )
    formatted_article_text = re.sub(r'\s+', ' ', formatted_article_text)
    # Tokenizes sentences from text
    sentence_list = nltk.sent_tokenize(article_text)
    # Stopwords variable to store all englsih stop words from nltk library
    stopwords = nltk.corpus.stopwords.words('english')
    # Sort through formatted text (with no punctuation) and
    # stores the frequency of each word in word_frequencies dictionary
    word_frequencies = {}
    for word in nltk.word_tokenize(formatted_article_text):
        if word not in stopwords:
            if word not in word_frequencies.keys():
                word_frequencies[word] = 1
            else:
                word_frequencies[word] += 1
    # Gets the maximum frequency value
    maximum_frequncy = max(word_frequencies.values())
    # Divides number of each words frequencies by the most occuring words frequency
    for word in word_frequencies.keys():
        word_frequencies[word] = (word_frequencies[word]/maximum_frequncy)
    # Sort through sentence_list to get each individual sentence's
    # score using  word_frequencies_dict
    sentence_scores = {}
    for sent in sentence_list:
        for word in nltk.word_tokenize(sent.lower()):
            if word in word_frequencies.keys():
                # Adjust the number at the end since it
                # makes the algorithm only allow sentences with less than X words
                # X being 30 in this case
                if len(sent.split(' ')) < 30:
                    if sent not in sentence_scores.keys():
                        sentence_scores[sent] = word_frequencies[word]
                    else:
                        sentence_scores[sent] += word_frequencies[word]
    # Get the top x sentences from sentence_scores
    summary_sentences = heapq.nlargest(num, sentence_scores, key=sentence_scores.get)
    # Make and print the summary
    summary = ' '.join(summary_sentences)
    # Return summarized text
    return summary

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
